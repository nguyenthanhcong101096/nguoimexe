//
//  Function to create an optimized svg url
//  Version: 1.0.6
@function svg-url($svg) {
  //
  //  Add missing namespace
  //
  @if not str-index($svg,xmlns) {
    $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '%', '%25');
    $chunk: str-replace($chunk, '#', '%23');
    $chunk: str-replace($chunk, '{', '%7B');
    $chunk: str-replace($chunk, '}', '%7D');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');

    //
    //    The maybe list
    //
    //    Keep size and compile time down
    //    ... only add on documented fail
    //
    //  $chunk: str-replace($chunk, '&', '%26');
    //  $chunk: str-replace($chunk, '|', '%7C');
    //  $chunk: str-replace($chunk, '[', '%5B');
    //  $chunk: str-replace($chunk, ']', '%5D');
    //  $chunk: str-replace($chunk, '^', '%5E');
    //  $chunk: str-replace($chunk, '`', '%60');
    //  $chunk: str-replace($chunk, ';', '%3B');
    //  $chunk: str-replace($chunk, '?', '%3F');
    //  $chunk: str-replace($chunk, ':', '%3A');
    //  $chunk: str-replace($chunk, '@', '%40');
    //  $chunk: str-replace($chunk, '=', '%3D');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url('data:image/svg+xml,#{$encoded}');
}

//  Background svg mixin
@mixin background-svg($svg) {
  background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @return if($index,
  str-slice($string, 1, $index - 1) + $replace +
  str-replace(str-slice($string, $index +
  str-length($search)), $search, $replace),
  $string);
}

@mixin overlay-white() {
  display: block;
  position: relative;

  &:after {
    content: '';
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: transparent;
    z-index: 2;
  }

  &:hover {
    &:after {
      background-color: rgba(255, 255, 2555, 0.5);
    }

    .picked {
      opacity: 0.6;
    }
  }
}

// Mixin for responsive
@mixin respond-to-mobile() {
  @media (max-width: $screen-mobile - 1) {
    @content;
  }
}

@mixin respond-to-not-mobile() {
  @media (min-width: $screen-mobile) {
    @content;
  }
}

@mixin respond-to-tablet() {
  @media (min-width: $screen-mobile) and (max-width: $screen-pc - 1) {
    @content;
  }
}

@mixin respond-to-pc() {
  @media (min-width: $screen-pc) {
    @content;
  }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Text mixin
@mixin text-gray-sm() {
  font-size: 14px;
  line-height: 1.14;
  letter-spacing: 0.3px;
  color: $color-warm-gray;
}

@mixin text-num-lg() {
  color: $color-number;
  font-size: 30px;
  line-height: 1.07;
}

// Centered position for element
@mixin centered($horizontal, $vertical) {
  position: absolute;
  left: $horizontal;
  top: $vertical;
  transform: translate(-$horizontal, -$vertical);
}

@mixin respond-to-mobile() {
  @media (max-width: $screen-mobile - 1) {
    @content;
  }
}

@mixin respond-to-not-mobile() {
  @media (min-width: $screen-mobile) {
    @content;
  }
}

@mixin flexbox($justify, $alin) {
  display: flex;
  align-items: $alin;
  justify-content: $justify;
}
